import os
import json
import time
import asyncio
from datetime import datetime
from strands import Agent, tool
from strands.models.anthropic import AnthropicModel
import httpx
from typing import Dict, Any, List, Optional
import pypandoc

# Configuration - set your API base URL here
BASE_URL = "http://localhost:8000"  # Change this to your deployed URL as needed

# ============= API-CALLING TOOLS =============

@tool
async def get_recent_financial_data(limit: int = 100) -> dict:
    """
    Get the most recent financial data rows for analysis.
    
    Args:
        limit (int): Number of recent rows to fetch (default: 100, max: 1000)
    
    Returns:
        dict: Financial data response with events
    """
    try:
        # Ensure limit doesn't exceed 1000
        limit = min(limit, 1000)
        
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{BASE_URL}/api/agent-query",
                params={"limit": limit},
                timeout=30.0
            )
            response.raise_for_status()
            
            data = response.json()
            
            return {
                "status": "success",
                "timestamp": datetime.now().isoformat(),
                "data": data.get("events", data) if isinstance(data, dict) else data,
                "count": len(data.get("events", data) if isinstance(data, dict) else data),
                "message": f"Retrieved {len(data.get('events', data) if isinstance(data, dict) else data)} financial records"
            }
    
    except httpx.HTTPStatusError as e:
        return {
            "status": "error",
            "timestamp": datetime.now().isoformat(),
            "data": [],
            "count": 0,
            "message": f"HTTP {e.response.status_code} error: {str(e)}"
        }
    except Exception as e:
        return {
            "status": "error",
            "timestamp": datetime.now().isoformat(),
            "data": [],
            "count": 0,
            "message": f"Error retrieving financial data: {str(e)}"
        }
    

def save_financial_report_to_pdf(markdown_text: str, images: list) -> str:
    """
    Convert the agent's Markdown report into a PDF with embedded screenshots.
    
    Args:
        markdown_text (str): Markdown text generated by the agent
        images (list): Uploaded screenshots in {filename, content_base64} format

    Returns:
        str: Path to the generated PDF file
    """
    # Create temp directory for images
    temp_dir = tempfile.mkdtemp()
    image_paths = []

    for img in images:
        img_path = os.path.join(temp_dir, img['filename'])
        with open(img_path, "wb") as f:
            f.write(base64.b64decode(img['content_base64']))
        image_paths.append(img_path)

    # Add images to the Markdown
    for path in image_paths:
        # Pandoc syntax for embedding images
        markdown_text += f"\n\n![]({path})\n\n"

    # Ensure output directory exists
    output_dir = "generated_reports"
    os.makedirs(output_dir, exist_ok=True)
    pdf_path = os.path.join(
        output_dir, f"financial_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    )

    # Convert Markdown → PDF
    pypandoc.convert_text(
        markdown_text,
        to="pdf",
        format="md",
        outputfile=pdf_path,
        extra_args=["--standalone"]
    )

    return pdf_path

# ============= MODEL & AGENT CONFIGURATION =============

def create_agent(api_key: str):
    """
    Create the financial analysis agent with API tools.
    
    Args:
        api_key (str): Anthropic API key
    
    Returns:
        Agent: Configured agent instance
    """
    model = AnthropicModel(
        client_args={
            "api_key": api_key,
        },
        max_tokens=4096,
        model_id="claude-sonnet-4-20250514",  # Updated to use available model
        params={
            "temperature": 0.3,
        }
    )
    
    # Only include the API-calling tools
    agent = Agent(
        model=model, 
        tools=[
            get_recent_financial_data,
        ]
    )
    
    return agent

# ============= ENHANCED PROMPT WITH EMBEDDED LOGIC =============

def get_financial_report_prompt(images: list, recent_data: dict) -> str:
    """
    Returns the comprehensive financial analysis and report generation prompt
    in clean Markdown format.
    
    Args:
        images (list): Encoded screenshots of graphs
        recent_data (dict): Most recent financial data rows
    
    Returns:
        str: Detailed financial analysis + report generation prompt
    """
    return f"""
You are a sophisticated Financial Data Analysis Agent responsible for generating
a comprehensive financial report.  

You have access to:

1. **Screenshots of current financial graphs**:  
   {[img['filename'] for img in images]}

2. **Recent financial data rows (up to {len(recent_data.get("data", []))} records)**:  
   {recent_data}

---

## OUTPUT REQUIREMENTS

- Generate the report **in Markdown format**.  
- Use headings (`#`, `##`, `###`), bullet points, and spacing for readability.  
- Structure the report as follows:

# Financial Report  
## Title Page  
- Project: Financial Insights Dashboard  
- Date: {datetime.now().strftime("%B %d, %Y")}  

## Executive Summary  
(Brief overview of findings)  

## Key Insights  
- Detect anomalies, outliers, trends, correlations  
- Identify KPIs, risk factors, and market insights  

## Graph Analysis  
- Integrate and discuss the provided screenshots at appropriate sections  
- Comment on clarity, data representation, and suggestions for improvement  

## Recommendations  
- Provide actionable next steps for stakeholders  

---

Ensure the Markdown is **well-structured and cleanly formatted** so it can be directly converted to PDF without further editing.
"""



# ============= MAIN EXECUTION FUNCTIONS =============


async def run_graph_management_agent(
    api_key: str,
    images: list
) -> str:
    """
    Runs the financial report generation agent.

    Args:
        api_key (str): Anthropic API key
        images (list): List of uploaded screenshots in 
                       {filename, content_base64} format

    Returns:
        str: Path to the generated PDF report
    """
    print("🚀 Starting Financial Report Generation Agent...")
    print(f"🌐 API Base URL: {BASE_URL}")
    print(f"🖼️ Received {len(images)} images")
    print(f"⏰ Start time: {datetime.now()}")
    print("=" * 80)

    # Create the AI agent
    agent = create_agent(api_key)

    try:
        # Fetch recent financial data using the tool directly
        recent_data = await get_recent_financial_data(limit=100)

        # Build the prompt
        message = get_financial_report_prompt(images=images, recent_data=recent_data)

        # Run the agent
        result = await agent(message)

        # Save report as PDF (you still need to implement this helper)
        pdf_path = save_financial_report_to_pdf(result, images)

        print(f"✅ Financial report generated successfully: {pdf_path}")
        return pdf_path

    except Exception as e:
        print(f"❌ Agent error: {e}")
        raise
